# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
# HTTP Server
server:
  port: 8183   # HTTP port
  contextPath: /userauth 
  
spring:
  profiles.default: default  
---
spring:
  profiles: default
# Discovery Server Access
eureka:
  instance:
    statusPageUrlPath: ${server.contextPath}/info
    healthCheckUrlPath: ${server.contextPath}/health
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
security:
  user:
    password: password      

# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
datasource:
  url: jdbc:h2:mem:testdb
  username: sa
  driver-class: org.h2.Driver
jpa:
  database-platform: org.hibernate.dialect.H2Dialect
  show-sql: true
  hibernate:
    ddl-auto: create-drop

logging:
  file: logs/${spring.application.name}.log
  level:
    com.netflix.discovery: 'OFF'
    org.springframework.cloud: DEBUG
    org.springframework.web: DEBUG
    sanchez.sergio: DEBUG
    
---
spring:
  profiles: docker
# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
datasource:
  url: jdbc:mysql://mysql-service/auth
  username: root
  password: root
  driver-class: com.mysql.jdbc.Driver
jpa:
  database-platform: org.hibernate.dialect.MySQLDialect
  show-sql: false
  hibernate:
    ddl-auto: create
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eureka-service/eureka/