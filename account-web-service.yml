server:
  port: 8763
  
spring:
  profiles.default: default
---
spring:
  profiles: default
  # RabbitMQ configuration
  rabbitmq:
    host: 192.168.0.31
    username: account-web
    password: bisite00
  cloud:
    stream:
      bindings:
        output:
          destination: account
          contentType: 'application/json'
# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
datasource:
  type: com.zaxxer.hikari.HikariDataSource
  url: jdbc:h2:mem:testdb;MODE=MySQL;MV_STORE=FALSE;MVCC=FALSE
  username: sa
  driver-class: org.h2.Driver
h2:
  console:
    enabled: true
jpa:
  database-platform: org.hibernate.dialect.H2Dialect
  database: H2
  show-sql: true
  hibernate:
    ddl-auto: none
    naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
# Discovery Server Access
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
logging:
  file: logs/${spring.application.name}.log
  level:
    com.netflix.discovery: 'OFF'
    org.springframework.cloud: DEBUG
    org.springframework.web: DEBUG
    sanchez.sergio: DEBUG
---
spring:
  profiles: docker
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eureka-service/eureka/