# Define the port where the API gateway server would be running
server:
  hostname: localhost
  port: 8765

zuul:
  routes:
    accounts:
      path: /uaa/v1/accounts/**
      serviceId: uaa-web-service
      stripPrefix: false
    uaa:
      path: /uaa/oauth/**
      serviceId: uaa-web-service
      stripPrefix: false
# Discovery Server Access
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token 
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
spring:
  # Disable Spring Boot basic authentication
  basic:
    enabled: false
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html
    client:
      accessTokenUri: http://${server.hostname}:${server.port}/uaa/token
      userAuthorizationUri: http://${server.hostname}:${server.port}/uaa/authorize
      clientId: client
      clientSecret: secret
    resource: 
      jwt:
        # Tells the JWT framework to fetch the public key from the authorization server during startup
        # Note: The authorization server needs to be running...
        key-uri: http://${server.hostname}:${server.port}/uaa/token_key
# The userInfoUri is used to authenticate the user so that SSO token can be relayed forward. It needs to either be
# a physical endpoint (defined using userInfoUri) OR can be bypassed if you use a JSON web token (JWT) that stores
# information about grants and authentication in the token itself.

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
